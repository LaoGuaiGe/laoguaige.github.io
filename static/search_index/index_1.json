{"/c-basics/array.html":{"title":"数组","content":" title: 数组 keywords: keyword1, keyword2 desc: description for this article show_source: false update: date: 2024 12 07 author: 老怪鸽 version: 1.0.0 content: 更新了基本文档 ## 一维数组 一维数组是线性数据结构，用于存储相同数据类型的元素集合。 **定义与初始化** ```c int numbers[10]; // 声明一个整型数组，包含10个元素 int nums[] {1, 2, 3, 4, 5}; // 声明并初始化一个整型数组 ``` **访问元素** ```c int value numbers[2]; // 访问索引为2的元素 numbers[2] 10; // 设置索引为2的元素值为10 ``` **遍历数组** ```c for (int i 0; i < 5; i++) { printf(\"%d \", nums[i]); } ``` ## 二维数组 二维数组用于存储表格形式的元素，可以看作是一个数组的数组。 **定义与初始化** ```c int matrix[3][4]; // 声明一个3行4列的整型数组 int grid[2][2] {{1, 2}, {3, 4}}; // 声明并初始化一个2x2的整型数组 ``` **访问元素** ```c int element grid[1][0]; // 访问第2行第1列的元素 grid[0][1] 10; // 设置第1行第2列的元素值为10 ``` **遍历数组** ```c for (int i 0; i < 2; i++) { for (int j 0; j < 2; j++) { printf(\"%d \", grid[i][j]); } printf(\"\\n\"); } ``` ## 字符数组与字符串 字符数组用于存储字符序列，C语言中没有专门的字符串类型，字符串通常以字符数组的形式存储。 **定义与初始化** ```c char str[11] \"Hello, World\"; // 声明并初始化一个字符数组 ``` **字符串操作** ```c #include <string.h> // 字符串长度 int length strlen(str); // 字符串复制 char copy[11]; strcpy(copy, str); // 字符串连接 char dest[21]; strcat(dest, str); strcat(dest, \" Goodbye\"); ``` > **strlen、strcpy、strcat**是 `string.h` 文件的函数用于返回字符串长度、从字符串1复制到字符串2、将字符串2接到字符串1的结尾。 > 还有`strstr`字符串查找函数，具体功能先自行百度。 ## 作业 编写一个C语言程序，实现以下功能： 1. 创建一个包含10个整数的数组。 2. 使用循环初始化数组，使得数组的每个元素等于其索引的平方（即array[i] i * i）。 3. 打印出数组的每个元素。 4. 计算数组中所有元素的和，并打印出来。 .. details::答案代码 ```c #include <stdio.h> int main() { int array[10]; // 创建一个包含10个整数的数组 int sum 0; // 用于存储数组元素的和 // 初始化数组并计算和 for (int i 0; i < 10; i++) { array[i] i * i; // 数组元素等于其索引的平方 sum + array[i]; // 累加数组元素到sum } // 打印数组元素 printf(\"数组元素：\\n\"); for (int i 0; i < 10; i++) { printf(\"array[%d] %d\\n\", i, array[i]); } // 打印数组元素的和 printf(\"数组元素的和：%d\\n\", sum); return 0; } ```"},"/c-basics/control.html":{"title":"C语言控制结构","content":" title: C语言控制结构 keywords: keyword1, keyword2 desc: description for this article show_source: false update: date: 2024 12 07 author: 老怪鸽 version: 1.0.0 content: 更新了基本文档 ## 顺序结构 顺序结构是最基本的程序结构，它按照代码的书写顺序依次执行。 ### 语句与表达式 **语句** * 语句是程序执行的基本单元，每个语句以分号 ; 结尾。 * C语言中的语句包括声明语句、赋值语句、控制语句等。 **表达式** * 表达式是由运算符和操作数组成的计算序列，它能够被计算出一个值。 * 表达式可以分为简单表达式和复杂表达式。 ### 输入与输出函数 在C语言中，标准输入输出库 `<stdio.h>` 提供了输入输出函数，用于与用户进行交互。 **输出函数** `printf()`：用于格式化输出数据到标准输出（通常是屏幕）。 **输入函数** `scanf()`：用于从标准输入（通常是键盘）读取格式化的数据。 ### 格式化输入输出 **格式化输出** 使用 `printf()` 函数，可以按照指定的格式输出数据。 格式化字符串包含普通字符和格式说明符，格式说明符用于指定数据的类型和输出格式。 **示例** ```c printf(\"整数：%d，浮点数：%f\\n\", 10, 3.14); // 输出整数和浮点数 ``` **格式说明符：** * **%d**：整数 * **%ld**：长整数 * **%f**：浮点数 * **%s**：字符串 * **%c**：字符 * **%x**：以十六进制显示的数 * **%e**：根据数据格式与类型自动显示 等等… **格式化输入** 使用 scanf() 函数，可以按照指定的格式读取用户输入的数据。 需要提供格式字符串和对应变量的地址。 **示例** ```c int number; scanf(\"%d\", &number); // 读取一个整数到变量number中 ``` ## 分支结构 分支结构用于根据条件执行不同的代码路径。 ### if语句 * **基本语法：** ```c if (条件表达式) { // 条件为真时执行的代码 } ``` * **if else语法：** ```c if (条件表达式) { // 条件为真时执行的代码 } else { // 条件为假时执行的代码 } ``` * **if else if else链：** ```c if (条件表达式1) { // 条件1为真时执行的代码 } else if (条件表达式2) { // 条件2为真时执行的代码 } else { // 以上条件都不为真时执行的代码 } ``` ### switch语句 * **基本语法：** ```c switch (表达式) { case 常量表达式1: // 执行代码块1 break; case 常量表达式2: // 执行代码块2 break; ... default: // 以上case都不匹配时执行的代码 break; } ``` ## 循环结构 循环结构用于重复执行一段代码。 ### for循环 * **基本语法：** ```c for (初始化表达式; 循环条件; 步进表达式) { // 循环体 } ``` ### while循环 * **基本语法：** ```c while (循环条件) { // 循环体 } ``` ### do while循环 * **基本语法：** ```c do { // 循环体 } while (循环条件); ``` ### break与continue语句 在C语言中，关键字 `break` 和 `continue` 语句用于控制循环的流程。它们可以用于 `for`、`while` 和 `do while` 循环中。 **break 语句** `break` 语句用于立即退出当前循环，不再执行循环中剩余的代码，也不管循环的条件是否满足。当 `break` 语句执行后，程序将继续执行循环之后的代码。 以下是一个使用 break 语句的例子： ```c #include <stdio.h> int main() { for (int i 1; i < 10; i++) { if (i 5) { break; // 当 i 等于 5 时，退出循环 } printf(\"%d \", i); // 打印 1 到 4 } printf(\"\\n循环结束\\n\"); return 0; } ``` 在这个例子中，循环会在 i 等于 5 时中断，所以输出结果将是 1 2 3 4，然后打印 “循环结束”。 **continue 语句** `continue` 语句用于跳过当前循环迭代中剩余的代码，并立即开始下一次循环迭代。与 `break` `不同，continue` 不会退出循环，而是继续执行下一次循环。 以下是一个使用 `continue` 语句的例子： ```c #include <stdio.h> int main() { for (int i 1; i < 10; i++) { if (i 5) { continue; // 当 i 等于 5 时，跳过当前迭代 } printf(\"%d \", i); // 打印 1 到 10，但不包括 5 } printf(\"\\n循环结束\\n\"); return 0; } ``` 在这个例子中，当 i 等于 5 `时，continue` 语句会跳过当前的迭代，不打印 5，输出结果将是 1 2 3 4 6 7 8 9 10，然后打印 “循环结束”。 >! 注意事项 > 1. `break` 和 `continue` 语句通常与 `if` 语句一起使用，以便在满足特定条件时改变循环的行为。 > 2. `在多层循环嵌套中，break` 和 `continue` 只影响它们所在的最内层循环。 > 3. 如果要在多层嵌套循环中跳出所有循环，可能需要使用额外的标记或条件变量，或者使用 **goto** 语句（但这通常不推荐，因为它可能导致代码难以理解和维护）。 ### 循环嵌套 循环嵌套是指在循环语句内部再嵌套一个或多个循环语句。以下是一些常见的循环嵌套示例： **for 循环嵌套** ```c //代码将输出一个 5x5 的星号矩阵。 #include <stdio.h> int main() { int i, j; for (i 0; i < 5; i++) { // 外层循环 for (j 0; j < 5; j++) { // 内层循环 printf(\"* \"); // 输出星号和空格 } printf(\"\\n\"); // 每完成内层循环一次，换行 } return 0; } ``` **while 循环嵌套** ```c //代码将输出一个 5x5 的星号矩阵。 #include <stdio.h> int main() { int i 0, j; while (i < 5) { // 外层循环 j 0; while (j < 5) { // 内层循环 printf(\"* \"); j++; } printf(\"\\n\"); i++; } return 0; } ``` 循环嵌套在处理矩阵、多维数组或需要重复执行的操作时非常有用。通过改变循环的条件和循环体内部的代码，可以实现各种复杂的逻辑和数据处理任务。 ## 作业 编写一个C语言程序，实现以下功能： 1. 程序开始时，提示用户输入一个整数。 2. 使用if else结构判断该整数是正数、负数还是零，并输出相应的信息。 3. 如果输入的整数是正数，使用for循环计算从1到该整数的所有整数的和，并输出结果。 4. 如果输入的整数是负数，使用while循环计算从该整数到 1的所有整数的和，并输出结果。 5. 如果输入的整数是零，输出“输入的数是零”。 .. details::答案代码 ```c #include <stdio.h> int main() { int number; int sum 0; // 获取用户输入 printf(\"请输入一个整数：\"); scanf(\"%d\", &number); // 使用if else结构判断并输出信息 if (number > 0) { // 使用for循环计算正数和 for (int i 1; i < number; i++) { sum + i; } printf(\"从1到%d的所有整数的和是：%d\\n\", number, sum); } else if (number < 0) { // 使用while循环计算负数和 while (number < 0) { sum + number; number++; } printf(\"从%d到 1的所有整数的和是：%d\\n\", number, sum); } else { // 输出零的信息 printf(\"输入的数是零。\\n\"); } return 0; } ```"},"/c-basics/download.html":{"title":"资料下载中心","content":" title: 资料下载中心 keywords: keyword1, keyword2 desc: description for this article show_source: false update: date: 2024 12 07 author: 老怪鸽 version: 1.0 content: 更新了基本文档 ## C语言的相关资料下载 ### 百度网盘下载 > 通过百度网盘分享的文件：**C语言 老怪鸽** > 链接：https://pan.baidu.com/s/1XWCTvSoG9I0DjKWtvOPO9w > 提取码：LGYY"},"/c-basics/install.html":{"title":"C语言环境搭建","content":" title: C语言环境搭建 keywords: keyword1, keyword2 desc: description for this article show_source: false update: date: 2024 12 07 author: 老怪鸽 version: 1.0.0 content: 更新了基本文档 ## 软件介绍 `Dev C++`是一款功能强大的 **C/C++** 语言编译器，不仅界面美观、可操作性高、使用方便，最最重要的是它还是免费的。 我们后续的C语言编程，都将使用Dev C++。 ## 软件下载 ### sourceforge官网下载 从sourceforge官网上下载。链接如下： <center> [👉Dev C++👈](https://sourceforge.net/projects/orwelldevcpp/) </center> > 提示：SourceForge 是全球最大开源软件开发平台和仓库，网站建立的宗旨，就是为开源软件提供一个存储、协作和发布的平台，拥有大量非常优秀的开源软件 ![图 0](../../static/images/docs/c basics/install/install 2024 12 07 01 44 18.png) 点击`Download`下载后，等待几秒便会弹出下载提示，下载完成后根据第二部分安装步骤进行软件的安装即可。 ### 百度网盘下载 我下载了本系列教程的版本，保存在了百度网盘。如果你不放心说明的链接或者上面sourceforge官网下载不了，那就下载百度网盘的。 > 通过百度网盘分享的文件：IDE > 链接：https://pan.baidu.com/s/14TXZLAfEbx xkuArETeJmg > 提取码：LGYY ## 安装步骤 1. 双击下载下来的 `Dev C++Setup.exe` 运行安装程序。 2. 点击OK，先不管语言，默认选择English。 ![图 1](../../static/images/docs/c basics/install/install 2024 12 07 01 51 16.png) 3. 点击 `I Agree` ![图 2](../../static/images/docs/c basics/install/install 2024 12 07 01 52 02.png) 4. 点击`Next`，全部组件都安装。 ![图 3](../../static/images/docs/c basics/install/install 2024 12 07 01 52 55.png) 5. 选择软件安装路径，如果使用默认安装路径安装在`C盘`，直接点击 `Install` 即可。如果更换安装路径，则点击`Browser`，选择相应的安装路径即可，如下图我的安装路径是`D盘/IDE/dev`，Dev Cpp是它自己会生成的文件夹。确认路径之后点击 `Install` 。 ![图 4](../../static/images/docs/c basics/install/install 2024 12 07 01 54 38.png) 6. 软件安装完成。点击Finish ![图 5](../../static/images/docs/c basics/install/install 2024 12 07 01 55 07.png) 7. 在打开的页面中，我们选择`简体中文/Chinese`，然后点击`Next`。 ![图 6](../../static/images/docs/c basics/install/install 2024 12 07 01 56 08.png) 8. 设置软件字体、颜色、图标等属性，如果选择使用默认形式，直接单击 `Next` 即可。 ![图 7](../../static/images/docs/c basics/install/install 2024 12 07 01 56 47.png) 9. 提示已经设置成功，说明就配置好了嘛，点击OK，就会打开界面了。 ![图 8](../../static/images/docs/c basics/install/install 2024 12 07 01 58 08.png) ## 安装验证 1. 按键盘的 `Ctrl+N` 键，快速新建一个文件。 ![图 9](../../static/images/docs/c basics/install/install 2024 12 07 02 00 39.png) 2. 往里面写入下面的代码： > 在C语言中，`//` 表示单行注释的开始。任何在 `//` 之后直到该行末尾的文本都会被编译器忽略，不会影响程序的编译和执行。**注释的主要目的是为了提高代码的可读性**，帮助程序员或其他人理解代码的功能和逻辑。**大家C语言大成后一定要养成习惯注释！！！** ```c #include <stdio.h> // 引入标准输入输出库的头文件 int main() { // printf函数用于打印格式化的字符串到标准输出 printf(\"Hello, World!\\n\"); return 0; // 表示程序执行成功 } ``` 这个代码的主要功能就是在命令窗口输出一个字符串: `Hello, World!`，其中`\\n`是特殊字符，表示的是换行显示的意思。 这个程序的其他C语言编程的基本元素： 代码 说明 : : : : #include <stdio.h> 预处理器指令，用于包含标准输入输出库的头文件，这样我们才能使用printf函数。 int main() 主函数，每个C程序都是从main函数开始执行的。 printf(\"Hello, World!\\n\"); 调用printf函数，打印字符串到控制台。 return 0; 表示程序正常结束。 接下来我们来验证我们安装的IDE能不能运行代码。现在保存我们新建的文件，我这里将它命名为`install_test.c`，并保存到我指定的文件夹。 > 保存的快捷键是 `Ctrl+S` >! 必须要对新建的文件要改动才能够保存！ ![图 10](../../static/images/docs/c basics/install/install 2024 12 07 02 09 44.png) 3. 运行代码 要先经过编译，编译之后才能够运行。如果你确保你的代码没有问题，可以选择编译+运行同时进行。 ![图 11](../../static/images/docs/c basics/install/install 2024 12 07 02 12 30.png) 我这里直接编译运行了。可以按快捷键F11。 如果不出意外的话，会弹出一个命令窗口，里面的内容显示的就是`Hello, World!` ![图 12](../../static/images/docs/c basics/install/install 2024 12 07 02 13 36.png) 结束。"},"/c-basics/index.html":{"title":"C语言基础","content":" title: C语言基础 keywords: keyword1, keyword2 desc: description for this article show_source: false update: date: 2024 12 07 author: 老怪鸽 version: 1.0.0 content: 更新了基本文档 ## C语言概述 ### C语言的诞生与发展 C语言是在20世纪70年代初由贝尔实验室的布莱恩·柯林汉（Brian Kernighan）和丹尼斯·里奇（Dennis Ritchie）共同设计的。C语言的设计初衷是为了开发UNIX操作系统。由于C语言具有高度的移植性和灵活性，它很快成为了最受欢迎的编程语言之一。 C语言的发展历程可以概括为以下几个阶段： * **早期阶段（1970年代初）**：C语言最初是为了在PDP 11计算机上开发UNIX系统而设计的。 * **标准化阶段（1980年代）**：随着C语言的流行，为了统一不同的C语言实现，美国国家标准协会（ANSI）开始制定C语言的标准，并于1989年发布了ANSI C标准（C89）。 * **国际标准化阶段（1990年代）**：国际标准化组织（ISO）采纳了ANSI C标准，并在1990年发布了ISO C标准（C90）。 * **后续发展**：随后，C语言的标准不断更新，包括C99（1999年）和C11（2011年）等，这些标准增加了新的语言特性，提高了语言的性能和安全性。 ## C语言的特点与应用领域 C语言之所以能够经久不衰，主要归功于以下特点： > **高效性**：C语言编译后的程序运行效率高，适合开发性能要求高的应用程序。 > **可移植性**：C语言编写的程序可以在多种计算机平台上编译运行。 > **灵活性**：C语言提供了丰富的运算符和数据类型，允许程序员进行底层操作。 > **功能强大**：C语言具有强大的过程化编程能力，可以直接访问物理地址，操作硬件。 > **基础性强**：C语言是许多现代编程语言的基础，如C++、Java、C#等。 C语言的应用领域非常广泛，包括但不限于： > **系统软件**：操作系统、编译器、网络服务器等。 > **嵌入式系统**：嵌入式设备、物联网（IoT）设备等。 > **游戏开发**：游戏引擎、游戏逻辑等。 > **科学计算**：数值分析、模拟计算等。"},"/c-basics/pointer.html":{"title":"指针","content":" title: 指针 keywords: keyword1, keyword2 desc: description for this article show_source: false update: date: 2024 12 07 author: 老怪鸽 version: 1.0.0 content: 更新了基本文档 ## 指针的概念与定义 指针是一个变量，它存储了另一个变量的地址。 在C语言中，指针的定义格式如下： ```c 数据类型 *指针变量名; ``` **示例：** ```c int *ptr; // 定义一个指向整数的指针 ``` ## 指针的运算 指针可以进行几种基本运算，包括加法、减法、自增（++）、自减（–）以及比较运算。 **示例：** ```c int var 5; int *ptr &var; // ptr指向var的地址 ptr++; // ptr指向下一个int类型的地址 ptr ; // ptr指向前一个int类型的地址 ``` ## 指针与数组 数组名在大多数情况下可以作为指向数组首元素的指针使用。 **示例：** ```c int arr[5] {10, 20, 30, 40, 50}; int *ptr arr; // ptr指向数组arr的首元素 for (int i 0; i < 5; i++) { printf(\"%d \", *(ptr + i)); // 输出数组元素 } ``` ## 指针与函数 可以通过指针向函数传递变量的地址，这样函数就可以直接修改传入的变量。 **示例：** ```c void increment(int *p) { (*p)++; // 直接修改指针所指向的值 } int main() { int num 10; increment(&num); // 传递num的地址 printf(\"num %d\\n\", num); // 输出11 return 0; } ``` ## 指针与字符串 在C语言中，字符串实际上是一个字符数组，可以用指针来操作字符串。 **示例：** ```c char str[] \"Hello, World!\"; char *ptr str; // ptr指向字符串的首字符 while (*ptr ! '\\0') { // 遍历字符串直到遇到空字符 printf(\"%c\", *ptr); ptr++; // 移动到下一个字符 } printf(\"\\n\"); ``` ## 指针数组与数组指针 指针数组是一个数组，其元素都是指针。 **示例：** ```c int var1 10, var2 20, var3 30; int *ptrArr[3] {&var1, &var2, &var3}; // 指针数组 for (int i 0; i < 3; i++) { printf(\"%d \", *ptrArr[i]); // 输出指针数组指向的值 } printf(\"\\n\"); ``` 数组指针是一个指向数组的指针。 **示例：** ```c int arr[3] {10, 20, 30}; int (*ptrArr)[3] &arr; // 数组指针 for (int i 0; i < 3; i++) { printf(\"%d \", (*ptrArr)[i]); // 输出数组指针指向的数组元素 } printf(\"\\n\"); ``` ## 作业 编写一个C语言程序，实现以下功能，不使用任何函数（除了main函数）： 1. 声明一个整型数组，包含10个元素。 2. 使用指针初始化数组，使得每个元素的值等于其索引的立方（即array[i] i * i * i）。 3. 使用指针遍历数组，并打印出每个元素的值。 4. 使用指针计算并打印数组中所有元素的总和。 **作业要求** * 确保所有操作都通过指针完成。 * 程序中不得使用数组下标[]，只能使用指针运算。 .. details::答案代码 ```c #include <stdio.h> int main() { int array[10]; // 声明一个整型数组 int *ptr array; // 指针指向数组的首元素 int sum 0; // 用于存储数组元素的总和 // 使用指针初始化数组 for (int i 0; i < 10; i++) { *ptr i * i * i; // 设置元素的值为索引的立方 ptr++; // 移动指针到下一个元素 } // 重置指针指向数组的首元素 ptr array; // 使用指针遍历数组并打印元素 printf(\"数组元素：\\n\"); for (int i 0; i < 10; i++) { printf(\"%d \", *ptr); // 打印当前指针指向的元素 sum + *ptr; // 累加到总和 ptr++; // 移动指针到下一个元素 } printf(\"\\n\"); // 打印数组元素的总和 printf(\"数组元素的总和：%d\\n\", sum); return 0; } ```"},"/c-basics/enumeration.html":{"title":"枚举","content":" title: 枚举 keywords: keyword1, keyword2 desc: description for this article show_source: false update: date: 2024 12 07 author: 老怪鸽 version: 1.0.0 content: 更新了基本文档 ## 枚举的概念 ### 什么是枚举 枚举（Enumeration）是一种用户定义的数据类型，它由一组命名的整数常量组成。在C语言中，枚举提供了一种方便的方式来处理一组相关的整数常量，这些常量通常代表一组预定义的状态或选项。枚举类型的定义通常以`enum`关键字开始，后面跟着枚举类型的名称和一对花括号，花括号内列出所有的枚举成员。 例如： ```c enum Weekday { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }; ``` 在这个例子中，Weekday是一个枚举类型，它包含了七个枚举成员，分别代表一周的七天。 ### 枚举的作用 枚举在编程中有以下几个主要作用： 1. **增加代码可读性**：枚举通过有意义的名字来表示一组相关的整数值，这使得代码更加易于理解和维护。 2. **提高代码可靠性**：使用枚举可以避免在代码中使用硬编码的整数值，减少了因整数值错误而导致的bug。 3. **限制值范围**：枚举定义了一组有效的值，这有助于防止程序使用无效或未定义的值。 4. **简化类型检查**：枚举类型提供了类型检查，这意味着只能将定义好的枚举值赋给枚举变量，而不是任意整数。 5. **便于维护**：如果需要修改枚举成员的值，只需在枚举定义中修改一次，而不需要在代码中到处寻找并替换硬编码的值。 ### 枚举与宏定义的区别 枚举和宏定义（宏）都可以用来定义常量，但它们之间有一些关键的区别： 1. **类型安全性** * 枚举：枚举提供类型安全性，枚举变量只能是枚举类型中定义的值。 * 宏：宏是预处理器功能，它通过文本替换来工作，不提供类型检查，因此宏可以是任何类型的数据。 2. **作用域** * 枚举：枚举类型具有作用域，可以在局部或全局范围内定义。 * 宏：宏通常在全局范围内有效，除非使用特殊的宏定义来限制其作用域。 3. **值范围** * 枚举：枚举成员默认从0开始，如果没有显式赋值，则每个成员依次递增。 * 宏：宏可以是任何表达式，不限于整数或递增的值。 4. **调试** * 枚举：在调试过程中，枚举成员的值可以被查看和修改，因为它们是具有类型的变量。 * 宏：宏在编译时被替换，因此在调试时无法查看宏的“变量”。 5. **内存占用** * 枚举：枚举通常占用与int类型相同大小的内存。 * 宏：宏不占用内存，因为它在编译前就被替换了。 6. **枚举的特殊功能** * 枚举：可以用来定义具有特定值的集合，并且可以与switch语句一起使用。 * 宏：宏主要用于定义常量或简单的代码替换，不能用于switch语句。 总的来说，枚举在C语言中提供了一种更安全和更结构化的方式来处理一组相关的常量，而宏则更灵活但缺乏类型安全性。 ## 枚举的声明 ### 枚举声明的语法 在C语言中，枚举的声明语法如下： ```c enum 枚举类型名 { 枚举成员1, 枚举成员2, ... 枚举成员n }; ``` 或者，你也可以在声明的同时定义枚举变量： ```c enum 枚举类型名 { 枚举成员1, 枚举成员2, ... 枚举成员n } 枚举变量1, 枚举变量2, ..., 枚举变量m; ``` 也可以在声明枚举类型的同时，为枚举成员指定特定的整数值： ```c enum 枚举类型名 { 枚举成员1 初始值1, 枚举成员2, ... 枚举成员n }; ``` ### 枚举类型的命名规则 枚举类型的命名规则通常遵循以下准则： * **大驼峰命名法**：通常枚举类型名使用大驼峰命名法（PascalCase），即每个单词的首字母都大写。例如：`enum Color`, `enum Weekday` * **有意义**：枚举类型名应该能够描述枚举成员所代表的一组值的共同特征。 ### 枚举成员的命名规则 枚举成员的命名规则通常遵循以下准则： * **小写字母开头**：枚举成员名通常使用小写字母开头，如果包含多个单词，则后续单词的首字母大写（小驼峰命名法，camelCase）。例如：enum Color { red, green, blue } * **有意义**：枚举成员名应该简洁且具有描述性，能够清楚地表示其代表的值。 * **不与关键字冲突**：枚举成员名不能是C语言的关键字。 * **常量风格**：枚举成员名通常使用常量风格，即全大写字母，用下划线分隔单词。例如：enum Weekday { MONDAY, TUESDAY, WEDNESDAY, ... } 遵循这些命名规则可以提高代码的可读性和可维护性。需要注意的是，这些规则并不是强制性的，但在大型项目或团队开发中，它们有助于保持代码风格的一致性。 ## 枚举的使用 ### 枚举变量的声明 枚举变量的声明通常在枚举类型定义之后进行。以下是声明枚举变量的几种方式： 1. 在枚举类型定义后直接声明变量： ```c enum Weekday { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY }; enum Weekday today; ``` 2. 在枚举类型定义时不指定类型名，直接声明变量： ```c enum { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY } today; ``` 3. 使用typedef为枚举类型定义一个别名，然后声明变量： ```c typedef enum { MONDAY, TUESDAY, WEDNESAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY } Weekday; Weekday today; ``` ### 枚举变量的赋值 枚举变量的赋值可以通过以下几种方式： 1. 赋值枚举类型中的成员： ```c enum Weekday { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY }; enum Weekday today MONDAY; ``` 2. 赋值整数值，如果整数值与枚举成员的值匹配，则可以赋值： ```c enum Weekday { MONDAY 1, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY }; enum Weekday today 1; // 等同于 today MONDAY; ``` ### 枚举变量之间的比较 枚举变量之间的比较可以直接使用关系运算符（ , ! , <, >, < , > ）： ```c enum Weekday { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY }; enum Weekday today MONDAY; enum Weekday tomorrow TUESDAY; if (today MONDAY) { // 执行相关代码 } if (today < tomorrow) { // 执行相关代码 } ``` ### 枚举在switch语句中的应用 枚举类型非常适合在switch语句中使用，因为它们能够清晰地表达一组相关的常量值： ```c enum Weekday { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY }; enum Weekday today MONDAY; switch (today) { case MONDAY: printf(\"It's Monday!\\n\"); break; case TUESDAY: printf(\"It's Tuesday!\\n\"); break; case WEDNESDAY: printf(\"It's Wednesday!\\n\"); break; case THURSDAY: printf(\"It's Thursday!\\n\"); break; case FRIDAY: printf(\"It's Friday!\\n\"); break; case SATURDAY: printf(\"It's Saturday!\\n\"); break; case SUNDAY: printf(\"It's Sunday!\\n\"); break; default: printf(\"Invalid day!\\n\"); break; } ``` 在switch语句中使用枚举可以增加代码的可读性和维护性，并且可以避免使用魔术数字（Magic Numbers）。 ## 枚举的特点 ### 枚举的默认值 在C语言中，枚举成员默认从0开始，如果没有为枚举成员指定值，它们将依次递增。例如： ```c enum Weekday { MONDAY, // 默认为 0 TUESDAY, // 默认为 1 WEDNESDAY, // 默认为 2 THURSDAY, // 默认为 3 FRIDAY, // 默认为 4 SATURDAY, // 默认为 5 SUNDAY // 默认为 6 }; ``` ### 枚举成员的值可以手动设置 枚举成员的值可以手动设置，如果为第一个成员设置了值，后续成员的值将基于前一个成员的值递增。例如： ```c enum Weekday { MONDAY 1, // 设置为 1 TUESDAY, // 默认为 2 WEDNESDAY 5, // 设置为 5 THURSDAY, // 默认为 6 FRIDAY, // 默认为 7 SATURDAY, // 默认为 8 SUNDAY // 默认为 9 }; ``` ### 枚举成员的值可以相同 在C语言中，枚举成员的值可以相同，这表示它们是同义的。例如： ```c enum Status { OFF 0, CLOSED 0, STOPPED 0, ON 1, OPEN 1, RUNNING 1 }; ``` 在上面的例子中，OFF, CLOSED, 和 STOPPED 都有相同的值0，而 ON, OPEN, 和 RUNNING 都有相同的值1。 ### 枚举类型的大小 枚举类型的大小取决于编译器和枚举成员中最大的整数值。通常，枚举类型至少能够表示其成员中的最大值。在大多数现代编译器中，枚举类型的大小默认与int相同，但也可以通过显式指定来改变。 以下是一个示例，演示如何确定枚举类型的大小： ```c #include <stdio.h> enum Weekday { MONDAY 1, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY }; int main() { printf(\"Size of enum Weekday: %zu bytes\\n\", sizeof(enum Weekday)); return 0; } ``` 在上面的代码中，`sizeof`运算符用于确定`enum Weekday`类型的大小。在大多数系统上，这将输出4，因为枚举类型通常与`int`类型大小相同。但是，这可能会根据编译器和平台的不同而有所变化。如果枚举成员的值在`int`的范围内，那么枚举类型通常就是`int`的大小。如果枚举成员的值超出了`int`的范围，枚举类型可能会更大。 ## 枚举的进阶用法 ### 枚举与结构体的结合使用 枚举与结构体结合使用可以创建具有明确意义的字段，这在设计程序时可以增加代码的可读性和维护性。以下是一个结合枚举和结构体的示例： ```c #include <stdio.h> // 定义一个枚举类型，用于表示颜色 enum Color { RED, GREEN, BLUE }; // 定义一个结构体，包含一个枚举类型的字段 struct Car { char *name; enum Color color; int year; }; int main() { // 创建一个结构体实例 struct Car myCar; myCar.name \"Toyota\"; myCar.color GREEN; myCar.year 2020; // 输出结构体实例的信息 printf(\"Car Name: %s\\n\", myCar.name); printf(\"Car Color: %d\\n\", myCar.color); // 这里输出的是枚举值的整数值 printf(\"Car Year: %d\\n\", myCar.year); return 0; } ``` 在这个例子中，Car结构体有一个名为`color`的字段，它的类型是之前定义的`Color`枚举。 ### 枚举与联合体的结合使用 枚举与联合体结合使用可以在不同的场景下存储不同类型的数据，同时使用枚举来明确当前存储的数据类型。以下是一个结合枚举和联合体的示例： ```c #include <stdio.h> // 定义一个枚举类型，用于表示联合体中存储的数据类型 enum DataType { INT, FLOAT, STRING }; // 定义一个联合体，可以存储不同类型的数据 union DataValue { int intValue; float floatValue; char *stringValue; }; // 定义一个结构体，包含枚举和联合体 struct Data { enum DataType type; union DataValue value; }; int main() { // 创建一个结构体实例 struct Data data; // 设置数据类型为整数，并存储一个整数值 data.type INT; data.value.intValue 42; // 输出数据 if (data.type INT) { printf(\"Integer: %d\\n\", data.value.intValue); } // 更改数据类型为浮点数，并存储一个浮点数值 data.type FLOAT; data.value.floatValue 3.14f; // 输出数据 if (data.type FLOAT) { printf(\"Float: %f\\n\", data.value.floatValue); } return 0; } ``` 在这个例子中，`Data`结构体包含一个`DataType`枚举和一个`DataValue`联合体，这样可以根据枚举值来决定联合体中存储的数据类型。 ### 枚举在函数参数中的应用 枚举在函数参数中的应用可以使得函数的意图更加明确，同时提高了代码的可读性。以下是一个使用枚举作为函数参数的示例： ```c #include <stdio.h> // 定义一个枚举类型，用于表示操作类型 enum Operation { ADD, SUBTRACT, MULTIPLY, DIVIDE }; // 定义一个函数，根据枚举参数执行不同的操作 double performOperation(double a, double b, enum Operation op) { switch (op) { case ADD: return a + b; case SUBTRACT: return a b; case MULTIPLY: return a * b; case DIVIDE: if (b ! 0) { return a / b; } else { printf(\"Error: Division by zero!\\n\"); return 0; } default: printf(\"Error: Unknown operation!\\n\"); return 0; } } int main() { double result; // 使用枚举作为函数参数进行加法操作 result performOperation(10, 5, ADD); printf(\"Addition Result: %f\\n\", result); // 使用枚举作为函数参数进行除法操作 result performOperation(10, 2, DIVIDE); printf(\"Division Result: %f\\n\", result); return 0; } ``` 在这个例子中，`performOperation`函数接受两个`double`类型的参数和一个`Operation`枚举类型的参数，根据枚举值执行不同的数学运算。 ## 枚举的注意事项 ### 枚举类型的范围 枚举类型的范围取决于编译器如何为枚举值分配整数值。在C语言中，如果没有明确指定枚举值的整数值，则默认从0开始，每个后续的枚举值比前一个大1。例如： ```c enum Color { RED, // 默认为 0 GREEN, // 默认为 1 BLUE // 默认为 2 }; ``` 枚举类型的范围是有限的，它通常取决于编译器如何表示整型。在大多数系统上，枚举类型至少可以表示从INT_MIN到INT_MAX范围内的所有整数值。然而，在实际使用中，枚举的范围通常由枚举中定义的值的数量决定。 如果需要明确指定枚举值的整数值，可以这样做： ```c enum Color { RED 10, GREEN, // 默认为 11 BLUE // 默认为 12 }; ``` 在这种情况下，枚举值的范围至少是从10到12。 ### 枚举类型与整型的兼容性 在C语言中，枚举类型与整型是兼容的，这意味着你可以将枚举值赋给整型变量，也可以将整型值赋给枚举变量，不需要显式转换。例如： ```c enum Color { RED, GREEN, BLUE }; int main() { enum Color c RED; int i c; // 将枚举值赋给整型变量 c 1; // 将整型值赋给枚举变量 return 0; } ``` 但是，这种兼容性可能导致一些问题，特别是当整型值不在枚举定义的范围内时。因此，最佳实践是在可能的情况下避免将整型值直接赋给枚举变量，除非你确信这个整型值是有效的枚举值。 ## 练习题 1. 编写一个枚举表示一周的天数，并编写一个函数打印出每天的名字。 2. 创建一个枚举表示颜色，并编写代码演示如何使用枚举值。"},"/c-basics/handle.html":{"title":"预处理命令","content":" title: 预处理命令 keywords: keyword1, keyword2 desc: description for this article show_source: false update: date: 2024 12 07 author: 老怪鸽 version: 1.0.0 content: 更新了基本文档 ## 宏定义 宏定义是C语言预处理器的一个重要功能，它可以定义常量或者简单的函数。本身的作用是替代！ ```c #include <stdio.h> // 定义一个宏来表示圆周率 #define PI 3.14159 // 定义一个宏来计算一个数的平方 #define SQUARE(x) ((x) * (x)) int main() { float radius 5.0f; float area; // 使用宏PI来计算圆的面积 area PI * SQUARE(radius); printf(\"Area of the circle with radius %f is %f\\n\", radius, area); return 0; } ``` ## 文件包含 文件包含使用 #include 指令，它允许将一个源文件的内容包含到另一个源文件中。 ```c // my_macros.h #ifndef MY_MACROS_H #define MY_MACROS_H #define MAX_SIZE 100 #define MIN_SIZE 10 #endif // MY_MACROS_H // main.c #include <stdio.h> #include \"my_macros.h\" // 包含自定义的宏定义文件 int main() { int array[MAX_SIZE]; printf(\"The size of the array is %d\\n\", MAX_SIZE); return 0; } ``` ## 条件编译 条件编译允许根据特定条件编译代码的一部分。这通常用于跨平台兼容性或调试。 ```c #include <stdio.h> #define DEBUG int main() { int value 10; #ifdef DEBUG printf(\"Debug: Value is set to %d\\n\", value); #endif #if defined(DEBUG) && (value > 5) printf(\"Debug: Value is greater than 5\\n\"); #endif #ifndef RELEASE printf(\"This is a debug build.\\n\"); #else printf(\"This is a release build.\\n\"); #endif return 0; } ```"},"/c-basics/structure.html":{"title":"结构体与联合体","content":" title: 结构体与联合体 keywords: keyword1, keyword2 desc: description for this article show_source: false update: date: 2024 12 07 author: 老怪鸽 version: 1.0.0 content: 更新了基本文档 ## 结构体的定义与使用 结构体是C语言中一种组合数据类型，它允许我们将多个不同类型的数据项组合成一个单一的实体。结构体的定义和使用是C语言编程中的基础技能。 **注意事项：** * 结构体定义以 struct 关键字开始。 * 结构体成员可以是不同的数据类型。 * 结构体变量在声明时不会自动初始化，需要手动赋值。 * 结构体成员的访问使用点操作符（.）。 **示例** ```c #include <stdio.h> #include <string.h> // 定义一个名为Person的结构体 struct Person { char name[50]; int age; float height; }; int main() { // 创建结构体变量 struct Person person1; // 使用点操作符为结构体成员赋值 strcpy(person1.name, \"Alice Smith\"); // 复制字符串到name成员 person1.age 30; // 赋值年龄 person1.height 5.7f; // 赋值身高 // 打印结构体成员的值 printf(\"Name: %s\\n\", person1.name); printf(\"Age: %d\\n\", person1.age); printf(\"Height: %.2f\\n\", person1.height); return 0; } ``` ## 结构体数组 结构体数组是一系列相同结构体的集合，可以用来存储多个具有相同属性的数据项。 **注意事项：** * 结构体数组声明时可以初始化。 * 结构体数组的索引从0开始。 * 可以通过循环遍历结构体数组来访问和操作每个元素。 **示例** ```c #include <stdio.h> #include <string.h> // 定义Person结构体 struct Person { char name[50]; int age; float height; }; int main() { // 声明并初始化结构体数组 struct Person employees[2] { {\"Alice Smith\", 30, 5.7f}, {\"Bob Johnson\", 25, 5.9f} }; // 遍历结构体数组并打印成员 for (int i 0; i < 2; i++) { printf(\"Employee %d:\\n\", i + 1); printf(\"Name: %s\\n\", employees[i].name); printf(\"Age: %d\\n\", employees[i].age); printf(\"Height: %.2f\\n\", employees[i].height); printf(\"\\n\"); } return 0; } ``` ## 结构体指针 结构体指针是一个变量，它存储了结构体变量的内存地址。使用结构体指针可以更高效地访问结构体成员。 **注意事项：** * 结构体指针使用星号（*）声明。 * 访问结构体指针指向的成员时，使用箭头操作符（ >）。 * 结构体指针可以用来传递结构体变量到函数中，而不需要复制整个结构体。 * **示例** ```c #include <stdio.h> #include <string.h> // 定义Person结构体 struct Person { char name[50]; int age; float height; }; int main() { // 声明结构体变量 struct Person person1 {\"Alice Smith\", 30, 5.7f}; // 声明结构体指针并指向person1 struct Person *ptr &person1; // 使用结构体指针访问成员 printf(\"Name: %s\\n\", ptr >name); // 使用箭头操作符访问成员 printf(\"Age: %d\\n\", ptr >age); printf(\"Height: %.2f\\n\", ptr >height); return 0; } ``` ## 联合体的定义与使用 联合体是一种特殊的存储类，它允许在相同的内存位置存储不同的数据类型，但在任意时刻只能存储其中一个类型的值。 **注意事项：** * 联合体以 union 关键字定义。 * 联合体的所有成员共享同一块内存。 * 联合体的大小是其最大成员的大小。 * 赋值给联合体的一个成员会覆盖其他成员的值。 **示例** ```c #include <stdio.h> // 定义一个联合体 union Value { int intVal; float floatVal; char charVal; }; int main() { // 声明联合体变量 union Value value; // 使用联合体 value.intVal 123; // 存储整数值 printf(\"Integer: %d\\n\", value.intVal); // 覆盖整数值，存储浮点数值 value.floatVal 456.789f; printf(\"Float: %f\\n\", value.floatVal); // 覆盖浮点数值，存储字符值 value.charVal 'A'; printf(\"Char: %c\\n\", value.charVal); // 注意：由于联合体成员共享内存，以下打印可能不会显示正确的整数值 printf(\"Integer (after char): %d\\n\", value.intVal); return 0; } ``` 在联合体的使用中，要注意一旦一个新的成员被赋值，之前存储的值就会丢失，因为所有成员共享同一块内存。 ## 作业 编写一个C语言程序，实现以下功能： 1. 定义一个结构体 Student，包含姓名（字符数组）、年龄（整型）和成绩（浮点型）。 2. 声明一个结构体数组 students，包含5个 Student 结构体元素。 3. 使用循环初始化结构体数组，从用户输入获取每个学生的信息。 4. 使用另一个循环打印出所有学生的信息。 5. 计算并打印所有学生的平均成绩。 .. details::答案代码 ```c #include <stdio.h> // 定义Student结构体 struct Student { char name[50]; int age; float grade; }; int main() { struct Student students[5]; float sum 0.0f; int i; // 初始化结构体数组 for (i 0; i < 5; i++) { printf(\"Enter information for student %d:\\n\", i + 1); printf(\"Name: \"); scanf(\"%49s\", students[i].name); // 限制输入长度以避免溢出 printf(\"Age: \"); scanf(\"%d\", &students[i].age); printf(\"Grade: \"); scanf(\"%f\", &students[i].grade); sum + students[i].grade; // 累加成绩 } // 打印所有学生的信息 printf(\"\\nList of students:\\n\"); for (i 0; i < 5; i++) { printf(\"Student %d: %s, Age: %d, Grade: %.2f\\n\", i + 1, students[i].name, students[i].age, students[i].grade); } // 计算并打印平均成绩 float average sum / 5; printf(\"\\nAverage grade of all students: %.2f\\n\", average); return 0; } ``` > 在这个程序中，我们首先定义了一个 Student 结构体，然后声明了一个包含5个 Student 结构体元素的数组 students。通过循环，我们从用户那里获取每个学生的信息，并将这些信息存储在数组中。同时，我们累加所有学生的成绩以计算平均成绩。最后，我们打印出所有学生的信息和平均成绩。 > 这个程序是一个简单的命令行应用程序，它假设用户会按照提示输入正确的信息。在实际应用中，可能需要添加更多的错误检查和异常处理。"},"/c-basics/function.html":{"title":"函数","content":" title: 函数 keywords: keyword1, keyword2 desc: description for this article show_source: false update: date: 2024 12 07 author: 老怪鸽 version: 1.0.0 content: 更新了基本文档 ## 函数的定义与调用 在C语言中，函数是执行特定任务的代码块。 以下是函数定义的格式： ```c 返回类型 函数名(参数类型 参数名) { // 函数体 // 执行的操作 } ``` 例如，一个计算两个整数和的函数： ```c int add(int a, int b) { return a + b; } ``` **调用函数** 函数定义后，可以在代码中的任何位置调用它： ```c int result add(5, 3); // 调用add函数，并将返回值赋给result变量 ``` ## 函数参数与返回值 **参数** 函数参数是传递给函数的值，用于函数内部的计算或操作。 * **形参**：函数定义中的参数称为形参。 * **实参**：函数调用时传递的参数称为实参。 **返回值** 函数执行完成后，可以通过return语句返回一个值给调用者。 ```c int multiply(int a, int b) { return a * b; // 返回a和b的乘积 } ``` ## 作用域与生命周期 **作用域** 变量的作用域是指变量可以被访问和使用的代码区域。 * **局部变量**：在函数内部定义的变量，其作用域仅限于该函数。 * **全局变量**：在所有函数外部定义的变量，其作用域为整个程序。 **生命周期** 变量的生命周期是指变量从创建到销毁的时间段。 * **局部变量**：在函数调用时创建，函数返回时销毁。 * **全局变量**：在程序开始时创建，程序结束时销毁。 ## 递归函数 递归函数是调用自身的函数。以下是一个计算阶乘的递归函数示例： ```c unsigned long long factorial(unsigned int n) { if (n < 1) { return 1; // 递归的基本情况 } else { return n * factorial(n 1); // 递归调用 } } ``` ## 库函数简介 C语言标准库提供了一系列预定义的函数，用于执行常见任务。 **数学库函数** ```c #include <math.h> double sqrt(double x); // 计算平方根 double pow(double x, double y); // 计算x的y次幂 ``` **输入输出库函数** ```c #include <stdio.h> int printf(const char *format, ...); // 格式化输出到标准输出 int scanf(const char *format, ...); // 格式化输入 ``` **字符串处理库函数** ```c #include <string.h> size_t strlen(const char *s); // 计算字符串长度 char *strcpy(char *dest, const char *src); // 复制字符串 ``` ## 作业 编写一个C语言程序，实现以下功能： 1. 定义一个函数calculateAverage，该函数接收一个整型数组和数组的大小，计算并返回数组元素的平均值（作为浮点数）。 2. 定义一个递归函数printArray，该函数接收一个整型数组、数组的大小和当前索引，从当前索引开始打印数组中的所有元素。 3. 在main函数中，创建一个包含至少10个整数的数组，并使用calculateAverage函数计算其平均值。 4. 使用printArray函数打印数组中的所有元素。 5. 使用C标准库函数对数组进行排序（升序），并再次使用printArray函数打印排序后的数组。 .. details::答案代码 ```c #include <stdio.h> // 函数声明 float calculateAverage(int arr[], int size); void printArray(int arr[], int size, int index); void sortArray(int arr[], int size); int main() { int numbers[10] {34, 78, 12, 9, 87, 66, 88, 99, 56, 45}; int size sizeof(numbers) / sizeof(numbers[0]); // 计算平均值 float average calculateAverage(numbers, size); printf(\"数组元素的平均值是：%.2f\\n\", average); // 打印数组 printf(\"原始数组：\\n\"); printArray(numbers, size, 0); // 排序数组 sortArray(numbers, size); // 打印排序后的数组 printf(\"排序后的数组：\\n\"); printArray(numbers, size, 0); return 0; } // 计算平均值的函数实现 float calculateAverage(int arr[], int size) { int sum 0; for (int i 0; i < size; i++) { sum + arr[i]; } return (float)sum / size; } // 递归打印数组的函数实现 void printArray(int arr[], int size, int index) { if (index < size) { printf(\"%d \", arr[index]); printArray(arr, size, index + 1); // 递归调用 } else { printf(\"\\n\"); } } // 数组排序的函数实现（使用简单的冒泡排序算法） void sortArray(int arr[], int size) { for (int i 0; i < size 1; i++) { for (int j 0; j < size i 1; j++) { if (arr[j] > arr[j + 1]) { // 交换元素 int temp arr[j]; arr[j] arr[j + 1]; arr[j + 1] temp; } } } } ```"},"/c-basics/basic.html":{"title":"基本概念","content":" title: 基本概念 keywords: keyword1, keyword2 desc: description for this article show_source: false update: date: 2024 12 07 author: 老怪鸽 version: 1.0 content: 更新了基本文档 ## 预处理器 C语言使用预处理器来处理源代码中的预处理指令，如 `#include` 用于包含头文件，`#define` 用于宏定义等。 ```c #include <stdio.h> // 预处理器指令，用于包含标准输入输出库的头文件 //使用printf时需要定义 ``` ## 语法规则 C语言程序是按顺序执行的，这意味着程序中的语句是从上到下逐条执行的，除非有控制流语句（如循环、分支等）改变执行顺序。 * C语言是区分大小写的，这意味着 `main` 和 `Main` 是不同的标识符。 * 每条语句通常以分号 `;` 结尾。 * 注释可以用 // 开始单行注释，或者用 `/* ... */` 包围多行注释。 ## 标识符与关键字 **标识符** 是程序员用来定义`变量`、`函数`或`其他用户定义项`的 **名称**。标识符的命名规则如下： * 必须以字母（a z, A Z）或下划线（_）开头。 * 后续字符可以是字母、数字（0 9）或下划线。 * 标识符是大小写敏感的。 * 标识符不能是关键字。 **关键字** 是C语言预定义的具有特定意义的单词，它们用于表示基本的语言构造和功能。例如： 类别 关键字列表 数据类型 char, int, float, double, short, long, signed, unsigned, void, _Bool, _Complex, _Imaginary 存储类 auto, register, static, extern, typedef, volatile, const 控制语句 if, else, switch, case, default, while, do, for, break, continue, goto, return 结构化数据 struct, union, enum 其他 sizeof, typeof, static_assert, _Alignas, _Alignof (部分为C11标准引入) > 有那么多的关键字记不住怎么办？没事，如果你在代码中将关键字用于关键字功能外的其他功能，通常都是会报错了，当报错时，你就该意识到你的标识符定义可能是关键字了。 ## 数据类型 C语言中的数据类型用于指定**变量**存储的数据种类和大小。基本数据类型包括： 数据类型名称 数据类型 字节大小 常规数据范围 有符号字符型 char 1 128 到 127 无符号字符型 unsigned char 1 0 到 255 有符号整型 int 4 2,147,483,648 到 2,147,483,647 无符号整型 unsigned int 4 0 到 4,294,967,295 有符号短整型 short 2 32,768 到 32,767 无符号短整型 unsigned short 2 0 到 65,535 有符号长整型 long 4 2,147,483,648 到 2,147,483,647 无符号长整型 unsigned long 4 0 到 4,294,967,295 单精度浮点型 float 4 约为 3.4E38 到 3.4E38（6 7位精度） 双精度浮点型 double 8 约为 1.7E308 到 1.7E308（15 16位精度） 扩展精度浮点型 long double 8 或 12 或 16 更大的范围和精度 .. details::字符型\\整型\\短整型\\长整型\\浮点型的扩展说明 **字符型（char）** 表示范围：通常是从 128 到 127（有符号），或者从 0 到 255（无符号）。 用途：用于存储单个字符或小的整数值。 关键字：char，unsigned char（无符号），signed char（有符号，通常默认）。 **整型（int）** 表示范围：通常是 2,147,483,648 到 2,147,483,647。 用途：用于存储整数，是最常用的整数类型。 关键字：int，unsigned int（无符号），signed int（有符号，通常默认）。 **短整型（short int）** 表示范围：通常是 32,768 到 32,767。 用途：当整型太大，而字符型不足以满足需求时使用。 关键字：short，short int，unsigned short（无符号），signed short（有符号，通常默认）。 **长整型（long int）** 表示范围：对于32位通常是 2,147,483,648 到 2,147,483,647，对于64位通常是 9,223,372,036,854,775,808 到 9,223,372,036,854,775,807。 用途：用于需要比普通整型更大范围的整数。 关键字：long，long int，unsigned long（无符号），signed long（有符号，通常默认）。 **浮点型（float）** 表示范围：大约是 3.4E+38 到 +3.4E+38。 精度：大约是6 7位十进制数。 用途：用于存储带有小数点的数值，但精度不如双精度浮点型。 关键字：float **双精度浮点型（double）** 表示范围：大约是 1.7E+308 到 +1.7E+308。 精度：大约是15位十进制数。 用途：用于需要更高精度和更大范围的浮点数。 关键字：double **长双精度浮点型（long double）** 表示范围：比双精度浮点型更大。 精度：比双精度浮点型更高。 用途：用于需要极高精度和非常大范围的浮点数。 关键字：long double > 请注意，数据范围可能因不同的编译器和平台而异，例如，在某些系统上，int 可能是32位的，而在其他系统上可能是16位的。同样，long 类型在某些平台上可能是64位的。 > 为了确保跨平台的一致性，可以使用标准头文件 <limits.h> 和 <float.h> 来获取确切的数据类型大小和范围。 不知道大家有没有发现一个现象，使用`unsigned`修饰的数据类型都是正数，通常我们是叫中无符号型，表示没有负数的意思，例如： ```c unsigned char temp 0; //表示该temp为无符号整型数据，数据范围是 0 到 4,294,967,295 char value 0; //表示该value为有符号字符型数据，数据范围是 128 到 127 ``` >! 当变量参与到正负的运算时，这个变量的定义很重要，不能使用无符号的变量进行运算，不然无法得到负数。 ## 变量与常量 ### 变量 **变量**是存储数据的标识符，它的值可以在程序执行期间改变。 ```c int age; // 声明一个整型变量age age 30; // 给变量age赋值 ``` .. details::变量的使用 **1. 声明与初始化** 在使用变量之前，必须先声明它。 > (声明也叫定义，就是通过给变量定义一个数据类型，让变量知道它是干什么的) 尽可能对变量进行初始化，以避免不确定的初始值。 >（比如在声明时赋值为0，这个涉及到后面的全局变量和局部变量的概念） **2. 作用域** 了解变量的作用域（全局变量、局部变量）。 避免在不同的作用域中使用相同的变量名，以免产生混淆。 **3. 命名规则** 使用有意义的变量名，使其能够反映变量的用途。不要定义什么a,b,c。别人看不懂。 遵守一致的命名约定（如驼峰命名法`MyValue`、下划线分隔`my_value`等）。 **4. 类型一致** 避免在不同类型之间进行不恰当的赋值，除非进行了显式类型转换。比如 `12 + 3.1415` 赋值给一个整型的变量，那么最终的结果还是一个整形的数据。 **5. 修改与访问** 不要在多个地方随意修改全局变量，这可能导致难以追踪的bug。 尽量减少变量的使用范围，局部变量比全局变量更安全。（通过定义函数返回的方式获取变量） ### 常量 **常量**是固定值的标识符，一旦定义后其值不能更改。用`const`定义的参数就是常量。 ```c const float PI 3.14159; // 声明一个常量PI ``` .. details::常量的使用 **1. 定义常量** 使用`#define`或`const`关键字来定义常量。 对于数值常量，使用`const`可以提供类型安全。 **2. 命名约定** 常量名通常使用`大写字母`，并用下划线分隔单词（如MAX_VALUE）。 **3. 使用常量** 使用常量代替硬编码的值，以提高代码的可读性和可维护性。 *如果一个值在程序中多次出现并且是固定的，应该将其定义为常量*。 **4. 不可变性** 一旦定义了常量，就不应该修改它的值。 对于const定义的常量，编译器会确保其值不被修改。 **5. 类型安全** 使用const关键字定义常量时，应该指定类型，以避免类型隐式转换可能带来的问题。 ## 运算符与表达式 运算符是用于执行某种操作或计算的特殊符号。C语言中有很多运算符，下面将一一介绍。 ### 算术运算符 运算符 符号 例子 加法 `+` value 1 + 1, value 2 减法 ` ` value 2 1, value 1 乘法 `*` value 2 * 2, value 4 除法 `/` value 2 / 2, value 1 取模 `%` value 2 % 2, value 0 算术运算符用于执行基本的数学运算，如加法、减法、乘法、除法和取模（求余数，只取第一个余数）。 ### 关系运算符 运算符 符号 等于 ` ` 不等于 `! ` 小于 `<` 大于 `>` 小于等于 `< ` 大于等于 `> ` 关系运算符用于比较两个值，并返回一个布尔结果（真或假）。 ### 逻辑运算符 运算符 符号 描述 例子 逻辑与 `&&` 如果&&两边的条件都成立则为真，否则为假 ( 1 && 0 ) 假 <br> ( 1 && 1 ) 真 逻辑或 `\\\\` 如果\\\\两边的条件有一个成立则为真，否则为假 ( 1 && 0 ) 真 <br> ( 0 && 0 ) 假 逻辑非 `!` 使用!会将真的条件改为假，假的条件改为真 ( !1 ) 假 <br> ( !0 ) 真 逻辑运算符用于组合或修改布尔表达式，逻辑与（`&&`）和逻辑或（``）用于组合两个条件，逻辑非（`!`）用于反转条件的布尔值。 ### 表达式 表达式是由运算符和操作数组成的语句，它计算出一个值。 ```c int a 5, b 3; int sum a + b; // 这是一个表达式，计算a和b的和 ``` 下面举一些例子： ```c 5 > 3 && 2 < 4 答案: True 7 7 8 ! 8 答案: True !(10 < 20) 答案: False 12 / 4 3 && 5 * 2 > 9 答案: True 2 + 3 * 4 < 15 答案: False (因为3 * 4先计算，得到12，然后2 + 12 14，14不小于15) 'a' 'A' 'b' < 'c' 答案: True (因为'a' ! 'A'为False，但'b' < 'c'为True，所以整体为True) !(100 % 3 1) && 10 / 2 > 5 答案: True (因为100 % 3 1为False，所以!False为True，且10 / 2等于5，5 > 5为True) 3.14 > 2.71 && 2.71 < 3.14 答案: True ``` ## 类型转换 类型转换是指将一种数据类型的变量转换为另一种数据类型。在C语言中，类型转换可以是隐式的，也可以是显式的。 ```c int num 5; double result num + 3.5; // num会被隐式转换为double类型 ``` 显式类型转换（也称为类型强制转换）： ```c double num 3.14; int intNum (int)num; // 显式将double类型的num转换为int类型 ``` ## 输入与输出 在C语言中，输入是指程序从用户或其他外部源接收数据的过程，而输出是指程序将数据发送到用户或其他外部设备的过程。 ### 输出（Output） 在C语言中，`printf` 函数是最常用的输出函数之一。它用于在控制台上打印格式化的字符串。`printf` 函数可以包含格式化占位符，如` %d` 用于整数，`%f` 用于浮点数，`%s` 用于字符串等。 ### 输入（Input） 输入通常使用 `scanf` 函数来完成，它是C语言标准库中的一个函数，用于从标准输入（通常是键盘）读取格式化的数据。`scanf` 函数使用格式化字符串来指定输入数据的类型和格式。 ### 输入输出例子 **读取并打印一个整数。** ```c #include <stdio.h> int main() { int number; printf(\"请输入一个整数: \"); scanf(\"%d\", &number); // 读取一个整数 printf(\"您输入的整数是: %d\\n\", number); // 打印这个整数 return 0; } ``` **读取并打印两个浮点数，然后计算它们的和。** ```c #include <stdio.h> int main() { float num1, num2, sum; printf(\"请输入两个浮点数，用空格隔开: \"); scanf(\"%f %f\", &num1, &num2); // 读取两个浮点数 sum num1 + num2; // 计算和 printf(\"您输入的两个浮点数分别是: %.2f 和 %.2f\\n\", num1, num2); printf(\"它们的和是: %.2f\\n\", sum); // 打印和 return 0; } ``` ## 作业 **温度转换程序** 编写一个C语言程序，该程序能够将用户输入的摄氏度（Celsius）转换为华氏度（Fahrenheit）并输出结果。转换公式如下： > 华氏度 摄氏度 * 9/5 + 32 **要求：** 程序开始时，应提示用户输入摄氏度值。 输入后，程序应计算对应的华氏度值。 输出结果应包括原始的摄氏度值和转换后的华氏度值，格式如下： ```c 摄氏度: XX 华氏度: YY ``` 其中 XX 是用户输入的摄氏度值，YY 是计算出的华氏度值。 **示例：** 如果用户输入 25，则程序输出应为： ```c 摄氏度: 25 华氏度: 77 ``` 请根据上述要求编写完整的C语言程序。 .. details::答案代码 ```c #include <stdio.h> int main() { float celsius, fahrenheit; // 提示用户输入摄氏度 printf(\"请输入摄氏度值: \"); scanf(\"%f\", &celsius); // 计算华氏度 fahrenheit celsius * 9.0 / 5.0 + 32; // 输出结果 printf(\"摄氏度: %.2f\\n\", celsius); printf(\"华氏度: %.2f\\n\", fahrenheit); return 0; } ``` 这段代码首先包含了标准输入输出头文件 stdio.h，然后在 main 函数中定义了两个浮点变量 celsius 和 fahrenheit。程序通过 printf 函数提示用户输入摄氏度值，并通过 scanf 函数读取用户输入的值。接着，使用给定的公式计算华氏度，并通过 printf 函数输出摄氏度和华氏度的值。最后，main 函数返回 0 表示程序正常结束。"}}